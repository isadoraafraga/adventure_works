{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.1", "generated_at": "2021-05-30T20:00:48.356576Z", "invocation_id": "ee85a423-5d77-4116-a5cf-75870ce45a66", "env": {}, "project_id": "f0b18b07d8164da71717f512e340ca5f", "user_id": "f8065789-6a7e-4a58-8c8a-f6d7555c9a87", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dw_adventure_works.dim_address": {"raw_sql": "with\r\n    address as (\r\n        select\r\n            /*Primary Key*/\r\n            addressid \r\n\r\n            /*Foreign Keys*/\r\n            , stateprovinceid\r\n\r\n           /*Other Columns*/\r\n            , spatiallocation\r\n            , rowguid\r\n            , postalcode\r\n            , modifieddate\r\n            , city\r\n            , addressline2\r\n            , addressline1\r\n        from {{ ref('stg_address')}}\r\n    )\r\n\r\n    ,    stateprovince as (\r\n        select\r\n             /*Primary Key*/\r\n            stateprovinceid\r\n\r\n            /*Foreign Keys*/\r\n            , territoryid\r\n            , countryregioncode\r\n\r\n           /*Other Columns*/\r\n            , stateprovincecode\r\n            , rowguid\r\n            , name\r\n            , modifieddate\r\n            , isonlystateprovinceflag\r\n        from {{ ref('stg_stateprovince')}}\r\n    )\r\n\r\n    , transformed as (\r\n        select\r\n        row_number() over (order by addressid) as address_sk\r\n            , address.addressid\r\n            , address.stateprovinceid\r\n            , address.spatiallocation\r\n            , address.rowguid\r\n            , address.postalcode\r\n            , address.modifieddate\r\n            , address.city\r\n            , address.addressline2\r\n            , address.addressline1\r\n            , stateprovince.name\r\n            , stateprovince.countryregioncode\r\n        from address\r\n        left join stateprovince on address.stateprovinceid = stateprovince.stateprovinceid\r\n    )\r\n    select * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dw_adventure_works.stg_address", "model.dw_adventure_works.stg_stateprovince"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "marts", "dim_address"], "unique_id": "model.dw_adventure_works.dim_address", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "marts\\dim_address.sql", "original_file_path": "models\\marts\\dim_address.sql", "name": "dim_address", "alias": "dim_address", "checksum": {"name": "sha256", "checksum": "488bea33576eb1c1d6d4beedf9b29935fef293ca9b263982e3a0271b97f52598"}, "tags": [], "refs": [["stg_address"], ["stg_stateprovince"]], "sources": [], "description": "", "columns": {"address_sk": {"name": "address_sk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\marts\\dim_address.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}}, "model.dw_adventure_works.dim_creditcard": {"raw_sql": "with\r\n    selected as (\r\n        select\r\n           /*Primary Key*/\r\n            creditcardid\r\n\r\n           /*Other Columns*/\r\n            , modifieddate\r\n            , expyear\r\n            , expmonth\r\n            , cardtype\r\n            , cardnumber\r\n        from {{ ref('stg_creditcard')}}\r\n    )\r\n\r\n    , transformed as (\r\n        select\r\n        row_number() over (order by creditcardid) as creditcard_sk\r\n        , *\r\n        from selected\r\n    )\r\n\r\n    select * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dw_adventure_works.stg_creditcard"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "marts", "dim_creditcard"], "unique_id": "model.dw_adventure_works.dim_creditcard", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "marts\\dim_creditcard.sql", "original_file_path": "models\\marts\\dim_creditcard.sql", "name": "dim_creditcard", "alias": "dim_creditcard", "checksum": {"name": "sha256", "checksum": "e4259b257144258e3ac87478fba181bf5e988b84f813b60b5b6a78b26703c3f4"}, "tags": [], "refs": [["stg_creditcard"]], "sources": [], "description": "", "columns": {"creditcard_sk": {"name": "creditcard_sk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\marts\\dim_creditcard.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}}, "model.dw_adventure_works.dim_customer": {"raw_sql": "with\r\n    person as (\r\n            select\r\n                /*Primary Key*/\r\n                businessentityid\r\n\r\n               /*Other Columns*/\r\n                , title\r\n                , suffix\r\n                , rowguid\r\n                , persontype\r\n                , namestyle\r\n                , modifieddate\r\n                , middlename\r\n                , lastname\r\n                , firstname\r\n                , emailpromotion\r\n            from {{ ref('stg_person')}}\r\n        )\r\n\r\n    , customer as (\r\n        select\r\n          /*Primary Key*/\r\n            customerid\r\n\r\n            /*Foreign Keys*/\r\n            , territoryid\r\n            , storeid\r\n            , personid\r\n\r\n           /*Other Columns*/\r\n            , rowguid\r\n            , modifieddate\r\n        from {{ ref('stg_customer')}}\r\n    )\r\n\r\n    , transformed as (\r\n        select\r\n        row_number() over (order by customerid) as customer_sk\r\n        , customer.customerid\r\n        , customer.territoryid\r\n        , customer.storeid\r\n        , customer.personid\r\n        , customer.rowguid\r\n        , customer.modifieddate\r\n        , person.middlename\r\n        , person.lastname\r\n        , person.firstname\r\n        from customer\r\n        left join person on customer.customerid = person.businessentityid\r\n    )\r\n\r\n    select * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dw_adventure_works.stg_person", "model.dw_adventure_works.stg_customer"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "marts", "dim_customer"], "unique_id": "model.dw_adventure_works.dim_customer", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "marts\\dim_customer.sql", "original_file_path": "models\\marts\\dim_customer.sql", "name": "dim_customer", "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "15223a40fe1aa3c1dd7b6696713a36bd23aeb56488501ae87a0f45bd3d0bd0b9"}, "tags": [], "refs": [["stg_person"], ["stg_customer"]], "sources": [], "description": "", "columns": {"customer_sk": {"name": "customer_sk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\marts\\dim_customer.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}}, "model.dw_adventure_works.dim_product": {"raw_sql": "with\r\n    selected as (\r\n        select\r\n             /*Primary Key*/\r\n            productid\r\n\r\n            /*Foreign Keys*/\r\n            , productsubcategoryid\r\n            , productmodelid\r\n\r\n           /*Other Columns*/\r\n            , weightunitmeasurecode\r\n            , weight\r\n            , style\r\n            , standardcost\r\n            , sizeunitmeasurecode\r\n            , size\r\n            , sellstartdate\r\n            , sellenddate\r\n            , safetystocklevel\r\n            , reorderpoint\r\n            , productnumber\r\n            , productline\r\n            , name\r\n            , modifieddate\r\n            , makeflag\r\n            , listprice\r\n            , finishedgoodsflag\r\n            , daystomanufacture\r\n            , color\r\n            , class\r\n        from {{ ref('stg_product')}}\r\n    )\r\n\r\n    , transformed as (\r\n        select\r\n        row_number() over (order by productid) as product_sk\r\n        , *\r\n        from selected\r\n    )\r\n\r\n    select * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dw_adventure_works.stg_product"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "marts", "dim_product"], "unique_id": "model.dw_adventure_works.dim_product", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "marts\\dim_product.sql", "original_file_path": "models\\marts\\dim_product.sql", "name": "dim_product", "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "b0b39389e4b43efed6e804e731e4adabdb4e0f4bb84d9803fef86efa09671f46"}, "tags": [], "refs": [["stg_product"]], "sources": [], "description": "", "columns": {"product_sk": {"name": "product_sk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\marts\\dim_product.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}}, "model.dw_adventure_works.dim_reason": {"raw_sql": "with\r\n    reason as (\r\n        select\r\n            /*Primary Key*/\r\n            salesreasonid\r\n\r\n           /*Other Columns*/\r\n            , name\r\n            , modifieddate\r\n            , reasontype\r\n        from {{ ref('stg_salesreason')}}\r\n    )\r\n\r\n    ,    reasonorder as (\r\n        select\r\n            /*Primary Key*/\r\n            salesreasonid\r\n\r\n            /*Foreign Keys*/\r\n            , salesorderid\r\n\r\n           /*Other Columns*/\r\n            , modifieddate\r\n        from {{ ref('stg_orderheadersalesreason')}}\r\n    )\r\n\r\n    , transformed as (\r\n        select\r\n            reasonorder.salesreasonid\r\n            , reasonorder.salesorderid\r\n            , reason.name\r\n            , reason.modifieddate\r\n            , reason.reasontype\r\n        from reasonorder\r\n        left join reason on reasonorder.salesreasonid = reason.salesreasonid\r\n    )\r\n    select * from transformed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dw_adventure_works.stg_salesreason", "model.dw_adventure_works.stg_orderheadersalesreason"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "marts", "dim_reason"], "unique_id": "model.dw_adventure_works.dim_reason", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "marts\\dim_reason.sql", "original_file_path": "models\\marts\\dim_reason.sql", "name": "dim_reason", "alias": "dim_reason", "checksum": {"name": "sha256", "checksum": "518ec2a7b1e0f3129fd323d6800c7379f669febe0fa583ad561de80c3d1e749f"}, "tags": [], "refs": [["stg_salesreason"], ["stg_orderheadersalesreason"]], "sources": [], "description": "", "columns": {"salesorder_sk": {"name": "salesorder_sk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\marts\\dim_reason.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}}, "model.dw_adventure_works.fact_order_details": {"raw_sql": "with\r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    )\r\n    , creditcard as (\r\n        select *\r\n        from {{ ref('dim_creditcard')}}\r\n    )\r\n    , product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    )\r\n    , address as (\r\n        select *\r\n        from {{ ref('dim_address')}}\r\n    )\r\n\r\n    , orders_with_sk as (\r\n            select\r\n            orders.salesorderid\r\n            , customer.customer_sk as customer_fk\r\n            , customer.firstname\r\n            , customer.lastname\r\n            , creditcard.creditcard_sk as creditcard_fk\r\n            , address.address_sk as address_fk\r\n            , address.city\r\n            , orders.shipmethodid\r\n            , orders.billtoaddressid\r\n            , orders.salespersonid\r\n            , orders.currencyrateid\r\n            , orders.territoryid\r\n            , orders.purchaseordernumber\r\n            , orders.modifieddate\r\n            , orders.rowguid\r\n            , orders.taxamt\r\n            , orders.onlineorderflag\r\n            , orders.status\r\n            , orders.orderdate\r\n            , orders.creditcardapprovalcode\r\n            , orders.subtotal\r\n            , orders.revisionnumber\r\n            , orders.freight\r\n            , orders.duedate\r\n            , orders.totaldue\r\n            , orders.shipdate\r\n            , orders.accountnumber\r\n        from {{ ref('stg_orders')}} as orders\r\n\r\n        left join customer on orders.customerid = customer.customerid\r\n        left join creditcard on orders.creditcardid = creditcard.creditcardid\r\n        left join address on orders.shiptoaddressid = address.addressid\r\n\r\n    )\r\n\r\n   , order_detail_with_sk as (\r\n        select\r\n            order_details.salesorderid\r\n            , order_details.specialofferid\r\n            , order_details.salesorderdetailid\r\n            , order_details.unitpricediscount\r\n            , order_details.unitprice\r\n            , order_details.rowguid\r\n            , order_details.orderqty\r\n            , order_details.saleprice\r\n            , order_details.modifieddate\r\n            , order_details.carriertrackingnumber\r\n            , product.product_sk as product_fk\r\n            , product.name as productname\r\n        from {{ ref('stg_orderdetail')}} as order_details\r\n        left join product on order_details.productid = product.productid\r\n    )\r\n\r\n    , final as (\r\n        select\r\n            order_detail_with_sk.salesorderid\r\n            , order_detail_with_sk.specialofferid\r\n            , order_detail_with_sk.salesorderdetailid\r\n            , order_detail_with_sk.unitpricediscount\r\n            , order_detail_with_sk.unitprice\r\n            , order_detail_with_sk.orderqty\r\n            , order_detail_with_sk.saleprice\r\n            , order_detail_with_sk.carriertrackingnumber\r\n            , order_detail_with_sk.product_fk\r\n            , order_detail_with_sk.productname\r\n            , orders_with_sk.customer_fk\r\n            , orders_with_sk.firstname\r\n            , orders_with_sk.lastname\r\n            , orders_with_sk.creditcard_fk\r\n            , orders_with_sk.address_fk\r\n            , orders_with_sk.city\r\n            , orders_with_sk.shipmethodid\r\n            , orders_with_sk.billtoaddressid\r\n            , orders_with_sk.salespersonid\r\n            , orders_with_sk.currencyrateid\r\n            , orders_with_sk.territoryid\r\n            , orders_with_sk.purchaseordernumber\r\n            , orders_with_sk.modifieddate\r\n            , orders_with_sk.rowguid\r\n            , orders_with_sk.taxamt\r\n            , orders_with_sk.onlineorderflag\r\n            , orders_with_sk.status\r\n            , orders_with_sk.orderdate\r\n            , orders_with_sk.creditcardapprovalcode\r\n            , orders_with_sk.subtotal\r\n            , orders_with_sk.revisionnumber\r\n            , orders_with_sk.freight\r\n            , orders_with_sk.duedate\r\n            , orders_with_sk.totaldue\r\n            , orders_with_sk.shipdate\r\n            , orders_with_sk.accountnumber\r\n            from order_detail_with_sk\r\n\r\n            left join orders_with_sk on order_detail_with_sk.salesorderid = orders_with_sk.salesorderid\r\n\r\n    )\r\n\r\n\r\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.dw_adventure_works.dim_customer", "model.dw_adventure_works.dim_creditcard", "model.dw_adventure_works.dim_product", "model.dw_adventure_works.dim_address", "model.dw_adventure_works.stg_orders", "model.dw_adventure_works.stg_orderdetail"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "marts", "fact_order_details"], "unique_id": "model.dw_adventure_works.fact_order_details", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "marts\\fact_order_details.sql", "original_file_path": "models\\marts\\fact_order_details.sql", "name": "fact_order_details", "alias": "fact_order_details", "checksum": {"name": "sha256", "checksum": "2514df033fc7795a1ecdeb7015885a90d0a072865681d7c06c6cb8bd70ef9826"}, "tags": [], "refs": [["dim_customer"], ["dim_creditcard"], ["dim_product"], ["dim_address"], ["stg_orders"], ["stg_orderdetail"]], "sources": [], "description": "", "columns": {"salesorderid": {"name": "salesorderid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_fk": {"name": "customer_fk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creditcard_fk": {"name": "creditcard_fk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_fk": {"name": "product_fk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_fk": {"name": "address_fk", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\marts\\fact_order_details.yml", "build_path": "target\\run\\dw_adventure_works\\models\\marts\\fact_order_details.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with\n    customer as (\n        select *\n        from `desafio-indicium`.`dw_adventure_works`.`dim_customer`\n    )\n    , creditcard as (\n        select *\n        from `desafio-indicium`.`dw_adventure_works`.`dim_creditcard`\n    )\n    , product as (\n        select *\n        from `desafio-indicium`.`dw_adventure_works`.`dim_product`\n    )\n    , address as (\n        select *\n        from `desafio-indicium`.`dw_adventure_works`.`dim_address`\n    )\n\n    , orders_with_sk as (\n            select\n            orders.salesorderid\n            , customer.customer_sk as customer_fk\n            , customer.firstname\n            , customer.lastname\n            , creditcard.creditcard_sk as creditcard_fk\n            , address.address_sk as address_fk\n            , address.city\n            , orders.shipmethodid\n            , orders.billtoaddressid\n            , orders.salespersonid\n            , orders.currencyrateid\n            , orders.territoryid\n            , orders.purchaseordernumber\n            , orders.modifieddate\n            , orders.rowguid\n            , orders.taxamt\n            , orders.onlineorderflag\n            , orders.status\n            , orders.orderdate\n            , orders.creditcardapprovalcode\n            , orders.subtotal\n            , orders.revisionnumber\n            , orders.freight\n            , orders.duedate\n            , orders.totaldue\n            , orders.shipdate\n            , orders.accountnumber\n        from `desafio-indicium`.`dw_adventure_works`.`stg_orders` as orders\n\n        left join customer on orders.customerid = customer.customerid\n        left join creditcard on orders.creditcardid = creditcard.creditcardid\n        left join address on orders.shiptoaddressid = address.addressid\n\n    )\n\n   , order_detail_with_sk as (\n        select\n            order_details.salesorderid\n            , order_details.specialofferid\n            , order_details.salesorderdetailid\n            , order_details.unitpricediscount\n            , order_details.unitprice\n            , order_details.rowguid\n            , order_details.orderqty\n            , order_details.saleprice\n            , order_details.modifieddate\n            , order_details.carriertrackingnumber\n            , product.product_sk as product_fk\n            , product.name as productname\n        from `desafio-indicium`.`dw_adventure_works`.`stg_orderdetail` as order_details\n        left join product on order_details.productid = product.productid\n    )\n\n    , final as (\n        select\n            order_detail_with_sk.salesorderid\n            , order_detail_with_sk.specialofferid\n            , order_detail_with_sk.salesorderdetailid\n            , order_detail_with_sk.unitpricediscount\n            , order_detail_with_sk.unitprice\n            , order_detail_with_sk.orderqty\n            , order_detail_with_sk.saleprice\n            , order_detail_with_sk.carriertrackingnumber\n            , order_detail_with_sk.product_fk\n            , order_detail_with_sk.productname\n            , orders_with_sk.customer_fk\n            , orders_with_sk.firstname\n            , orders_with_sk.lastname\n            , orders_with_sk.creditcard_fk\n            , orders_with_sk.address_fk\n            , orders_with_sk.city\n            , orders_with_sk.shipmethodid\n            , orders_with_sk.billtoaddressid\n            , orders_with_sk.salespersonid\n            , orders_with_sk.currencyrateid\n            , orders_with_sk.territoryid\n            , orders_with_sk.purchaseordernumber\n            , orders_with_sk.modifieddate\n            , orders_with_sk.rowguid\n            , orders_with_sk.taxamt\n            , orders_with_sk.onlineorderflag\n            , orders_with_sk.status\n            , orders_with_sk.orderdate\n            , orders_with_sk.creditcardapprovalcode\n            , orders_with_sk.subtotal\n            , orders_with_sk.revisionnumber\n            , orders_with_sk.freight\n            , orders_with_sk.duedate\n            , orders_with_sk.totaldue\n            , orders_with_sk.shipdate\n            , orders_with_sk.accountnumber\n            from order_detail_with_sk\n\n            left join orders_with_sk on order_detail_with_sk.salesorderid = orders_with_sk.salesorderid\n\n    )\n\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`desafio-indicium`.`dw_adventure_works`.`fact_order_details`"}, "model.dw_adventure_works.stg_address": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            addressid\r\n\r\n            /*Foreign Keys*/\r\n            , stateprovinceid\r\n\r\n           /*Other Columns*/\r\n            , spatiallocation\r\n            , rowguid\r\n            , postalcode\r\n            , modifieddate\r\n            , city\r\n            , addressline2\r\n            , addressline1\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','address')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.address"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_address"], "unique_id": "model.dw_adventure_works.stg_address", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_address.sql", "original_file_path": "models\\staging\\stg_address.sql", "name": "stg_address", "alias": "stg_address", "checksum": {"name": "sha256", "checksum": "6ab4854f2f6c68c38cc74060aa2127784c7a32c8be03630adc69e91e441372bc"}, "tags": [], "refs": [], "sources": [["adventure_works", "address"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_countryregion": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            countryregioncode\r\n\r\n           /*Other Columns*/\r\n            , name\r\n            , modifieddate\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','countryregion')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.countryregion"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_countryregion"], "unique_id": "model.dw_adventure_works.stg_countryregion", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_countryregion.sql", "original_file_path": "models\\staging\\stg_countryregion.sql", "name": "stg_countryregion", "alias": "stg_countryregion", "checksum": {"name": "sha256", "checksum": "148e169a24ffde61b7e0396a1082193a0b3b265bf4e809af799cf448f136a8cc"}, "tags": [], "refs": [], "sources": [["adventure_works", "countryregion"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_creditcard": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            creditcardid\r\n\r\n           /*Other Columns*/\r\n            , modifieddate\r\n            , expyear\r\n            , expmonth\r\n            , cardtype\r\n            , cardnumber\r\n\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','creditcard')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.creditcard"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_creditcard"], "unique_id": "model.dw_adventure_works.stg_creditcard", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_creditcard.sql", "original_file_path": "models\\staging\\stg_creditcard.sql", "name": "stg_creditcard", "alias": "stg_creditcard", "checksum": {"name": "sha256", "checksum": "ebc94d679bf81e7fe2ace45f54d12baf53318448a2e18eafcbda89092e82e9e9"}, "tags": [], "refs": [], "sources": [["adventure_works", "creditcard"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_customer": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            customerid\r\n\r\n            /*Foreign Keys*/\r\n            , territoryid\r\n            , storeid\r\n            , personid\r\n\r\n           /*Other Columns*/\r\n            , rowguid\r\n            , modifieddate\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','customer')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.customer"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_customer"], "unique_id": "model.dw_adventure_works.stg_customer", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_customer.sql", "original_file_path": "models\\staging\\stg_customer.sql", "name": "stg_customer", "alias": "stg_customer", "checksum": {"name": "sha256", "checksum": "c8c7ab11ca560c95a0af2dc461230dd841c3edf4443904816814487fabd5bf34"}, "tags": [], "refs": [], "sources": [["adventure_works", "customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_orderdetail": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            salesorderid\r\n\r\n            /*Foreign Keys*/\r\n            , specialofferid\r\n            , salesorderdetailid\r\n            , productid\r\n\r\n           /*Other Columns*/\r\n            , unitpricediscount\r\n            , unitprice\r\n            , rowguid\r\n            , orderqty\r\n            , unitprice * (1 - unitpricediscount) * orderqty as saleprice\r\n            , modifieddate\r\n            , carriertrackingnumber\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','salesorderdetail')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.salesorderdetail"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_orderdetail"], "unique_id": "model.dw_adventure_works.stg_orderdetail", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_orderdetail.sql", "original_file_path": "models\\staging\\stg_orderdetail.sql", "name": "stg_orderdetail", "alias": "stg_orderdetail", "checksum": {"name": "sha256", "checksum": "580d5da17edb8f38c7e466ecc5e302fb804335e029cff21ff84c72192c89b7a4"}, "tags": [], "refs": [], "sources": [["adventure_works", "salesorderdetail"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_orderheadersalesreason": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            salesreasonid\r\n\r\n            /*Foreign Keys*/\r\n            , salesorderid\r\n\r\n           /*Other Columns*/\r\n            , modifieddate\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','salesorderheadersalesreason')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.salesorderheadersalesreason"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_orderheadersalesreason"], "unique_id": "model.dw_adventure_works.stg_orderheadersalesreason", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_orderheadersalesreason.sql", "original_file_path": "models\\staging\\stg_orderheadersalesreason.sql", "name": "stg_orderheadersalesreason", "alias": "stg_orderheadersalesreason", "checksum": {"name": "sha256", "checksum": "537b490a35719a23381900b16038a79d4bba460ece04384648571f50e4cfe0e5"}, "tags": [], "refs": [], "sources": [["adventure_works", "salesorderheadersalesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_orders": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            salesorderid\r\n\r\n            /*Foreign Keys*/\r\n            , customerid\r\n            , shipmethodid\r\n            , billtoaddressid\r\n            , salespersonid\r\n            , currencyrateid\r\n            , creditcardid\r\n            , territoryid\r\n            , shiptoaddressid\r\n\r\n           /*Other Columns*/\r\n            , purchaseordernumber\r\n            , modifieddate\r\n            , rowguid\r\n            , taxamt\r\n            , onlineorderflag\r\n            , status\r\n            , orderdate\r\n            , creditcardapprovalcode\r\n            , subtotal\r\n            , revisionnumber\r\n            , freight\r\n            , duedate\r\n            , totaldue\r\n            , shipdate\r\n            , accountnumber\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','salesorderheader')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.salesorderheader"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_orders"], "unique_id": "model.dw_adventure_works.stg_orders", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_orders.sql", "original_file_path": "models\\staging\\stg_orders.sql", "name": "stg_orders", "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "1aca54dfcc54f64fb93e114cd9c882cb404f671c5d579e5a9aa542864d748d8f"}, "tags": [], "refs": [], "sources": [["adventure_works", "salesorderheader"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_person": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            businessentityid\r\n\r\n           /*Other Columns*/\r\n            , title\r\n            , suffix\r\n            , rowguid\r\n            , persontype\r\n            , namestyle\r\n            , modifieddate\r\n            , middlename\r\n            , lastname\r\n            , firstname\r\n            , emailpromotion\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','person')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.person"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_person"], "unique_id": "model.dw_adventure_works.stg_person", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_person.sql", "original_file_path": "models\\staging\\stg_person.sql", "name": "stg_person", "alias": "stg_person", "checksum": {"name": "sha256", "checksum": "05e4588a62602f8b8e438d1a1933416c9f2aef1a6b350f5d284a5e0212e44f7e"}, "tags": [], "refs": [], "sources": [["adventure_works", "person"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_product": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            productid\r\n\r\n            /*Foreign Keys*/\r\n            , productsubcategoryid\r\n            , productmodelid\r\n\r\n           /*Other Columns*/\r\n            , weightunitmeasurecode\r\n            , weight\r\n            , style\r\n            , standardcost\r\n            , sizeunitmeasurecode\r\n            , size\r\n            , sellstartdate\r\n            , sellenddate\r\n            , safetystocklevel\r\n            , reorderpoint\r\n            , productnumber\r\n            , productline\r\n            , name\r\n            , modifieddate\r\n            , makeflag\r\n            , listprice\r\n            , finishedgoodsflag\r\n            , daystomanufacture\r\n            , color\r\n            , class\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','product')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.product"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_product"], "unique_id": "model.dw_adventure_works.stg_product", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_product.sql", "original_file_path": "models\\staging\\stg_product.sql", "name": "stg_product", "alias": "stg_product", "checksum": {"name": "sha256", "checksum": "295e081c6f864b47bb6229f0a0741595a3038dd26faecec037962d2b1489d8c1"}, "tags": [], "refs": [], "sources": [["adventure_works", "product"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_salesreason": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            salesreasonid\r\n\r\n           /*Other Columns*/\r\n            , name\r\n            , modifieddate\r\n            , reasontype\r\n           \r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','salesreason')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.salesreason"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_salesreason"], "unique_id": "model.dw_adventure_works.stg_salesreason", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_salesreason.sql", "original_file_path": "models\\staging\\stg_salesreason.sql", "name": "stg_salesreason", "alias": "stg_salesreason", "checksum": {"name": "sha256", "checksum": "02c00f5d7fd411bb24309727cb421731e03d69f61b3119c296712888cf1ca923"}, "tags": [], "refs": [], "sources": [["adventure_works", "salesreason"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "model.dw_adventure_works.stg_stateprovince": {"raw_sql": "with\r\n    source as (\r\n        select\r\n            /*Primary Key*/\r\n            stateprovinceid\r\n\r\n            /*Foreign Keys*/\r\n            , territoryid\r\n            , countryregioncode\r\n\r\n           /*Other Columns*/\r\n            , stateprovincecode\r\n            , rowguid\r\n            , name\r\n            , modifieddate\r\n            , isonlystateprovinceflag\r\n\r\n           /*Stitch Columns*/\r\n            , _sdc_batched_at\r\n            , _sdc_extracted_at as last_etl_run\r\n            , _sdc_received_at\r\n            , _sdc_sequence\r\n            , _sdc_table_version\r\n        from {{ source('adventure_works','stateprovince')}}\r\n    )\r\n\r\n    select * from source", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dw_adventure_works.adventure_works.stateprovince"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "staging", "stg_stateprovince"], "unique_id": "model.dw_adventure_works.stg_stateprovince", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "staging\\stg_stateprovince.sql", "original_file_path": "models\\staging\\stg_stateprovince.sql", "name": "stg_stateprovince", "alias": "stg_stateprovince", "checksum": {"name": "sha256", "checksum": "873f45f573be50778a810f8d8e002f7d8d13cc7be266cd22aed8a0456cdcd311"}, "tags": [], "refs": [], "sources": [["adventure_works", "stateprovince"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}}, "test.dw_adventure_works.test": {"raw_sql": "with   \r\n    validation_id as (\r\n        select count(distinct salesorderid) as ord_qty\r\n        from {{ref('fact_order_details')}}\r\n    )\r\n  \r\n    ,    validation_qt as (\r\n        select sum(orderqty) as sum_qty\r\n        from {{ref('fact_order_details')}}\r\n    )\r\n\r\n    ,    validation_price as (\r\n        select sum(saleprice) as sum_price\r\n        from {{ref('fact_order_details')}}\r\n    )\r\n\r\n    select * from validation_id where ord_qty != 31465\r\n    select * from validation_qt where sum_qty != 274914\r\n    select * from validation_price where sum_price != 109846381.399888", "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.dw_adventure_works.fact_order_details", "model.dw_adventure_works.fact_order_details", "model.dw_adventure_works.fact_order_details"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "data_test", "test"], "unique_id": "test.dw_adventure_works.test", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "data_test\\test.sql", "original_file_path": "tests\\test.sql", "name": "test", "alias": "test", "checksum": {"name": "sha256", "checksum": "be64458c4fb28d07994246213d1294087ae1986c05d90be74518b0fcf687ee0c"}, "tags": ["data"], "refs": [["fact_order_details"], ["fact_order_details"], ["fact_order_details"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}}, "test.dw_adventure_works.unique_dim_address_address_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "address_sk", "model": "{{ ref('dim_address') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dw_adventure_works.dim_address"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "unique_dim_address_address_sk"], "unique_id": "test.dw_adventure_works.unique_dim_address_address_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\unique_dim_address_address_sk.sql", "original_file_path": "models\\marts\\dim_address.yml", "name": "unique_dim_address_address_sk", "alias": "unique_dim_address_address_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_address"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "address_sk"}, "test.dw_adventure_works.not_null_dim_address_address_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_sk", "model": "{{ ref('dim_address') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dw_adventure_works.dim_address"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "not_null_dim_address_address_sk"], "unique_id": "test.dw_adventure_works.not_null_dim_address_address_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\not_null_dim_address_address_sk.sql", "original_file_path": "models\\marts\\dim_address.yml", "name": "not_null_dim_address_address_sk", "alias": "not_null_dim_address_address_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_address"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "address_sk"}, "test.dw_adventure_works.unique_dim_creditcard_creditcard_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "creditcard_sk", "model": "{{ ref('dim_creditcard') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dw_adventure_works.dim_creditcard"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "unique_dim_creditcard_creditcard_sk"], "unique_id": "test.dw_adventure_works.unique_dim_creditcard_creditcard_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\unique_dim_creditcard_creditcard_sk.sql", "original_file_path": "models\\marts\\dim_creditcard.yml", "name": "unique_dim_creditcard_creditcard_sk", "alias": "unique_dim_creditcard_creditcard_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_creditcard"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "creditcard_sk"}, "test.dw_adventure_works.not_null_dim_creditcard_creditcard_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "creditcard_sk", "model": "{{ ref('dim_creditcard') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dw_adventure_works.dim_creditcard"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "not_null_dim_creditcard_creditcard_sk"], "unique_id": "test.dw_adventure_works.not_null_dim_creditcard_creditcard_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\not_null_dim_creditcard_creditcard_sk.sql", "original_file_path": "models\\marts\\dim_creditcard.yml", "name": "not_null_dim_creditcard_creditcard_sk", "alias": "not_null_dim_creditcard_creditcard_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_creditcard"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "creditcard_sk"}, "test.dw_adventure_works.unique_dim_customer_customer_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_sk", "model": "{{ ref('dim_customer') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dw_adventure_works.dim_customer"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "unique_dim_customer_customer_sk"], "unique_id": "test.dw_adventure_works.unique_dim_customer_customer_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\unique_dim_customer_customer_sk.sql", "original_file_path": "models\\marts\\dim_customer.yml", "name": "unique_dim_customer_customer_sk", "alias": "unique_dim_customer_customer_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_customer"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "customer_sk"}, "test.dw_adventure_works.not_null_dim_customer_customer_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_sk", "model": "{{ ref('dim_customer') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dw_adventure_works.dim_customer"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "not_null_dim_customer_customer_sk"], "unique_id": "test.dw_adventure_works.not_null_dim_customer_customer_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\not_null_dim_customer_customer_sk.sql", "original_file_path": "models\\marts\\dim_customer.yml", "name": "not_null_dim_customer_customer_sk", "alias": "not_null_dim_customer_customer_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_customer"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "customer_sk"}, "test.dw_adventure_works.unique_dim_product_product_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_sk", "model": "{{ ref('dim_product') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dw_adventure_works.dim_product"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "unique_dim_product_product_sk"], "unique_id": "test.dw_adventure_works.unique_dim_product_product_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\unique_dim_product_product_sk.sql", "original_file_path": "models\\marts\\dim_product.yml", "name": "unique_dim_product_product_sk", "alias": "unique_dim_product_product_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_product"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "product_sk"}, "test.dw_adventure_works.not_null_dim_product_product_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_sk", "model": "{{ ref('dim_product') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dw_adventure_works.dim_product"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "not_null_dim_product_product_sk"], "unique_id": "test.dw_adventure_works.not_null_dim_product_product_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\not_null_dim_product_product_sk.sql", "original_file_path": "models\\marts\\dim_product.yml", "name": "not_null_dim_product_product_sk", "alias": "not_null_dim_product_product_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_product"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "product_sk"}, "test.dw_adventure_works.unique_dim_reason_salesorder_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorder_sk", "model": "{{ ref('dim_reason') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dw_adventure_works.dim_reason"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "unique_dim_reason_salesorder_sk"], "unique_id": "test.dw_adventure_works.unique_dim_reason_salesorder_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\unique_dim_reason_salesorder_sk.sql", "original_file_path": "models\\marts\\dim_reason.yml", "name": "unique_dim_reason_salesorder_sk", "alias": "unique_dim_reason_salesorder_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_reason"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "salesorder_sk"}, "test.dw_adventure_works.not_null_dim_reason_salesorder_sk": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorder_sk", "model": "{{ ref('dim_reason') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dw_adventure_works.dim_reason"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "not_null_dim_reason_salesorder_sk"], "unique_id": "test.dw_adventure_works.not_null_dim_reason_salesorder_sk", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\not_null_dim_reason_salesorder_sk.sql", "original_file_path": "models\\marts\\dim_reason.yml", "name": "not_null_dim_reason_salesorder_sk", "alias": "not_null_dim_reason_salesorder_sk", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_reason"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "salesorder_sk"}, "test.dw_adventure_works.not_null_fact_order_details_salesorderid": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ ref('fact_order_details') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dw_adventure_works.fact_order_details"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "not_null_fact_order_details_salesorderid"], "unique_id": "test.dw_adventure_works.not_null_fact_order_details_salesorderid", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\not_null_fact_order_details_salesorderid.sql", "original_file_path": "models\\marts\\fact_order_details.yml", "name": "not_null_fact_order_details_salesorderid", "alias": "not_null_fact_order_details_salesorderid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fact_order_details"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "salesorderid"}, "test.dw_adventure_works.relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customer')", "field": "customer_sk", "column_name": "customer_fk", "model": "{{ ref('fact_order_details') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.dw_adventure_works.dim_customer", "model.dw_adventure_works.fact_order_details"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_"], "unique_id": "test.dw_adventure_works.relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\relationships_fact_order_details_6096cfa1de3ddd37c27383b76d567672.sql", "original_file_path": "models\\marts\\fact_order_details.yml", "name": "relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_", "alias": "relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_customer"], ["fact_order_details"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "customer_fk"}, "test.dw_adventure_works.relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_creditcard')", "field": "creditcard_sk", "column_name": "creditcard_fk", "model": "{{ ref('fact_order_details') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.dw_adventure_works.dim_creditcard", "model.dw_adventure_works.fact_order_details"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_"], "unique_id": "test.dw_adventure_works.relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\relationships_fact_order_details_78a834e8358cb9dd1bdabd8e8d9dc8b8.sql", "original_file_path": "models\\marts\\fact_order_details.yml", "name": "relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_", "alias": "relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_creditcard"], ["fact_order_details"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "creditcard_fk"}, "test.dw_adventure_works.relationships_fact_order_details_product_fk__product_sk__ref_dim_product_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_product')", "field": "product_sk", "column_name": "product_fk", "model": "{{ ref('fact_order_details') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.dw_adventure_works.dim_product", "model.dw_adventure_works.fact_order_details"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "relationships_fact_order_details_product_fk__product_sk__ref_dim_product_"], "unique_id": "test.dw_adventure_works.relationships_fact_order_details_product_fk__product_sk__ref_dim_product_", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\relationships_fact_order_details_93cd69111d3b5c6e3f0f335f9326b488.sql", "original_file_path": "models\\marts\\fact_order_details.yml", "name": "relationships_fact_order_details_product_fk__product_sk__ref_dim_product_", "alias": "relationships_fact_order_details_product_fk__product_sk__ref_dim_product_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_product"], ["fact_order_details"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "product_fk"}, "test.dw_adventure_works.relationships_fact_order_details_address_fk__address_sk__ref_dim_address_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_address')", "field": "address_sk", "column_name": "address_fk", "model": "{{ ref('fact_order_details') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.dw_adventure_works.dim_address", "model.dw_adventure_works.fact_order_details"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "relationships_fact_order_details_address_fk__address_sk__ref_dim_address_"], "unique_id": "test.dw_adventure_works.relationships_fact_order_details_address_fk__address_sk__ref_dim_address_", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\relationships_fact_order_details_779e2a69eaaf06b4815ce59925775ee5.sql", "original_file_path": "models\\marts\\fact_order_details.yml", "name": "relationships_fact_order_details_address_fk__address_sk__ref_dim_address_", "alias": "relationships_fact_order_details_address_fk__address_sk__ref_dim_address_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_address"], ["fact_order_details"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "address_fk"}, "test.dw_adventure_works.source_unique_adventure_works_salesorderheader_salesorderid": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderid", "model": "{{ source('adventure_works', 'salesorderheader') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.dw_adventure_works.adventure_works.salesorderheader"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "source_unique_adventure_works_salesorderheader_salesorderid"], "unique_id": "test.dw_adventure_works.source_unique_adventure_works_salesorderheader_salesorderid", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\source_unique_adventure_works_salesorderheader_salesorderid.sql", "original_file_path": "models\\staging\\sources.yml", "name": "source_unique_adventure_works_salesorderheader_salesorderid", "alias": "source_unique_adventure_works_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["adventure_works", "salesorderheader"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "salesorderid"}, "test.dw_adventure_works.source_not_null_adventure_works_salesorderheader_salesorderid": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ source('adventure_works', 'salesorderheader') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dw_adventure_works.adventure_works.salesorderheader"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "desafio-indicium", "schema": "dw_adventure_works", "fqn": ["dw_adventure_works", "schema_test", "source_not_null_adventure_works_salesorderheader_salesorderid"], "unique_id": "test.dw_adventure_works.source_not_null_adventure_works_salesorderheader_salesorderid", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "schema_test\\source_not_null_adventure_works_salesorderheader_salesorderid.sql", "original_file_path": "models\\staging\\sources.yml", "name": "source_not_null_adventure_works_salesorderheader_salesorderid", "alias": "source_not_null_adventure_works_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["adventure_works", "salesorderheader"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "ERROR"}, "column_name": "salesorderid"}}, "sources": {"source.dw_adventure_works.adventure_works.salesorderheader": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "salesorderheader"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.salesorderheader", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "salesorderheader", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "salesorderheader", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "One record per order. Includes cancelled and deleted orders.\n", "columns": {"salesorderid": {"name": "salesorderid", "description": "Primary key of the orders table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`salesorderheader`"}, "source.dw_adventure_works.adventure_works.salesorderdetail": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "salesorderdetail"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.salesorderdetail", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "salesorderdetail", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "salesorderdetail", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`salesorderdetail`"}, "source.dw_adventure_works.adventure_works.salesorderheadersalesreason": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "salesorderheadersalesreason"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.salesorderheadersalesreason", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "salesorderheadersalesreason", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "salesorderheadersalesreason", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`salesorderheadersalesreason`"}, "source.dw_adventure_works.adventure_works.salesreason": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "salesreason"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.salesreason", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "salesreason", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "salesreason", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`salesreason`"}, "source.dw_adventure_works.adventure_works.creditcard": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "creditcard"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.creditcard", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "creditcard", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "creditcard", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`creditcard`"}, "source.dw_adventure_works.adventure_works.customer": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "customer"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.customer", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "customer", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`customer`"}, "source.dw_adventure_works.adventure_works.person": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "person"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.person", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "person", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "person", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`person`"}, "source.dw_adventure_works.adventure_works.address": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "address"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.address", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "address", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "address", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`address`"}, "source.dw_adventure_works.adventure_works.countryregion": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "countryregion"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.countryregion", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "countryregion", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "countryregion", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`countryregion`"}, "source.dw_adventure_works.adventure_works.stateprovince": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "stateprovince"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.stateprovince", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "stateprovince", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "stateprovince", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`stateprovince`"}, "source.dw_adventure_works.adventure_works.product": {"fqn": ["dw_adventure_works", "staging", "adventure_works", "product"], "database": "desafio-indicium", "schema": "adventure_works", "unique_id": "source.dw_adventure_works.adventure_works.product", "package_name": "dw_adventure_works", "root_path": "C:\\Users\\user\\desafio_final", "path": "models\\staging\\sources.yml", "original_file_path": "models\\staging\\sources.yml", "name": "product", "source_name": "adventure_works", "source_description": "This is a replica of the Postgres database used by our client.", "loader": "", "identifier": "product", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafio-indicium`.`adventure_works`.`product`"}}, "macros": {"macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\etc.sql", "original_file_path": "macros\\etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\copy.sql", "original_file_path": "macros\\materializations\\copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {# there should be exactly one ref or exactly one source #}\n  {% set destination = this.incorporate(type='table') %}\n\n  {% set dependency_type = none %}\n  {% if (model.refs | length) == 1 and (model.sources | length) == 0 %}\n    {% set dependency_type = 'ref' %}\n  {% elif (model.refs | length) == 0 and (model.sources | length) == 1 %}\n    {% set dependency_type = 'source' %}\n  {% else %}\n    {% set msg %}\n        Expected exactly one ref or exactly one source, instead got {{ model.refs | length }} models and {{ model.sources | length }} sources.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% if dependency_type == 'ref' %}\n    {% set src =  ref(*model.refs[0]) %}\n  {% else %}\n    {% set src =  source(*model.sources[0]) %}\n  {% endif %}\n\n  {%- set result_str = adapter.copy_table(\n      src,\n      destination,\n      config.get('copy_materialization', 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }};\n\n      set _dbt_max_partition = (\n          select max({{ partition_by.field }}) from {{ this }}\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n\n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n\n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\bigquery", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_alias.sql", "original_file_path": "macros\\etc\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\is_incremental.sql", "original_file_path": "macros\\etc\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\query.sql", "original_file_path": "macros\\etc\\query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\table\\table.sql", "original_file_path": "macros\\materializations\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\view.sql", "original_file_path": "macros\\materializations\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "c:\\users\\user\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.dw_adventure_works.dim_address": ["model.dw_adventure_works.stg_address", "model.dw_adventure_works.stg_stateprovince"], "model.dw_adventure_works.dim_creditcard": ["model.dw_adventure_works.stg_creditcard"], "model.dw_adventure_works.dim_customer": ["model.dw_adventure_works.stg_customer", "model.dw_adventure_works.stg_person"], "model.dw_adventure_works.dim_product": ["model.dw_adventure_works.stg_product"], "model.dw_adventure_works.dim_reason": ["model.dw_adventure_works.stg_orderheadersalesreason", "model.dw_adventure_works.stg_salesreason"], "model.dw_adventure_works.fact_order_details": ["model.dw_adventure_works.dim_address", "model.dw_adventure_works.dim_creditcard", "model.dw_adventure_works.dim_customer", "model.dw_adventure_works.dim_product", "model.dw_adventure_works.stg_orderdetail", "model.dw_adventure_works.stg_orders"], "model.dw_adventure_works.stg_address": ["source.dw_adventure_works.adventure_works.address"], "model.dw_adventure_works.stg_countryregion": ["source.dw_adventure_works.adventure_works.countryregion"], "model.dw_adventure_works.stg_creditcard": ["source.dw_adventure_works.adventure_works.creditcard"], "model.dw_adventure_works.stg_customer": ["source.dw_adventure_works.adventure_works.customer"], "model.dw_adventure_works.stg_orderdetail": ["source.dw_adventure_works.adventure_works.salesorderdetail"], "model.dw_adventure_works.stg_orderheadersalesreason": ["source.dw_adventure_works.adventure_works.salesorderheadersalesreason"], "model.dw_adventure_works.stg_orders": ["source.dw_adventure_works.adventure_works.salesorderheader"], "model.dw_adventure_works.stg_person": ["source.dw_adventure_works.adventure_works.person"], "model.dw_adventure_works.stg_product": ["source.dw_adventure_works.adventure_works.product"], "model.dw_adventure_works.stg_salesreason": ["source.dw_adventure_works.adventure_works.salesreason"], "model.dw_adventure_works.stg_stateprovince": ["source.dw_adventure_works.adventure_works.stateprovince"], "test.dw_adventure_works.test": ["model.dw_adventure_works.fact_order_details", "model.dw_adventure_works.fact_order_details", "model.dw_adventure_works.fact_order_details"], "test.dw_adventure_works.unique_dim_address_address_sk": ["model.dw_adventure_works.dim_address"], "test.dw_adventure_works.not_null_dim_address_address_sk": ["model.dw_adventure_works.dim_address"], "test.dw_adventure_works.unique_dim_creditcard_creditcard_sk": ["model.dw_adventure_works.dim_creditcard"], "test.dw_adventure_works.not_null_dim_creditcard_creditcard_sk": ["model.dw_adventure_works.dim_creditcard"], "test.dw_adventure_works.unique_dim_customer_customer_sk": ["model.dw_adventure_works.dim_customer"], "test.dw_adventure_works.not_null_dim_customer_customer_sk": ["model.dw_adventure_works.dim_customer"], "test.dw_adventure_works.unique_dim_product_product_sk": ["model.dw_adventure_works.dim_product"], "test.dw_adventure_works.not_null_dim_product_product_sk": ["model.dw_adventure_works.dim_product"], "test.dw_adventure_works.unique_dim_reason_salesorder_sk": ["model.dw_adventure_works.dim_reason"], "test.dw_adventure_works.not_null_dim_reason_salesorder_sk": ["model.dw_adventure_works.dim_reason"], "test.dw_adventure_works.not_null_fact_order_details_salesorderid": ["model.dw_adventure_works.fact_order_details"], "test.dw_adventure_works.relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_": ["model.dw_adventure_works.dim_customer", "model.dw_adventure_works.fact_order_details"], "test.dw_adventure_works.relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_": ["model.dw_adventure_works.dim_creditcard", "model.dw_adventure_works.fact_order_details"], "test.dw_adventure_works.relationships_fact_order_details_product_fk__product_sk__ref_dim_product_": ["model.dw_adventure_works.dim_product", "model.dw_adventure_works.fact_order_details"], "test.dw_adventure_works.relationships_fact_order_details_address_fk__address_sk__ref_dim_address_": ["model.dw_adventure_works.dim_address", "model.dw_adventure_works.fact_order_details"], "test.dw_adventure_works.source_unique_adventure_works_salesorderheader_salesorderid": ["source.dw_adventure_works.adventure_works.salesorderheader"], "test.dw_adventure_works.source_not_null_adventure_works_salesorderheader_salesorderid": ["source.dw_adventure_works.adventure_works.salesorderheader"], "source.dw_adventure_works.adventure_works.salesorderheader": [], "source.dw_adventure_works.adventure_works.salesorderdetail": [], "source.dw_adventure_works.adventure_works.salesorderheadersalesreason": [], "source.dw_adventure_works.adventure_works.salesreason": [], "source.dw_adventure_works.adventure_works.creditcard": [], "source.dw_adventure_works.adventure_works.customer": [], "source.dw_adventure_works.adventure_works.person": [], "source.dw_adventure_works.adventure_works.address": [], "source.dw_adventure_works.adventure_works.countryregion": [], "source.dw_adventure_works.adventure_works.stateprovince": [], "source.dw_adventure_works.adventure_works.product": []}, "child_map": {"model.dw_adventure_works.dim_address": ["model.dw_adventure_works.fact_order_details", "test.dw_adventure_works.not_null_dim_address_address_sk", "test.dw_adventure_works.relationships_fact_order_details_address_fk__address_sk__ref_dim_address_", "test.dw_adventure_works.unique_dim_address_address_sk"], "model.dw_adventure_works.dim_creditcard": ["model.dw_adventure_works.fact_order_details", "test.dw_adventure_works.not_null_dim_creditcard_creditcard_sk", "test.dw_adventure_works.relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_", "test.dw_adventure_works.unique_dim_creditcard_creditcard_sk"], "model.dw_adventure_works.dim_customer": ["model.dw_adventure_works.fact_order_details", "test.dw_adventure_works.not_null_dim_customer_customer_sk", "test.dw_adventure_works.relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_", "test.dw_adventure_works.unique_dim_customer_customer_sk"], "model.dw_adventure_works.dim_product": ["model.dw_adventure_works.fact_order_details", "test.dw_adventure_works.not_null_dim_product_product_sk", "test.dw_adventure_works.relationships_fact_order_details_product_fk__product_sk__ref_dim_product_", "test.dw_adventure_works.unique_dim_product_product_sk"], "model.dw_adventure_works.dim_reason": ["test.dw_adventure_works.not_null_dim_reason_salesorder_sk", "test.dw_adventure_works.unique_dim_reason_salesorder_sk"], "model.dw_adventure_works.fact_order_details": ["test.dw_adventure_works.not_null_fact_order_details_salesorderid", "test.dw_adventure_works.relationships_fact_order_details_address_fk__address_sk__ref_dim_address_", "test.dw_adventure_works.relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_", "test.dw_adventure_works.relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_", "test.dw_adventure_works.relationships_fact_order_details_product_fk__product_sk__ref_dim_product_", "test.dw_adventure_works.test", "test.dw_adventure_works.test", "test.dw_adventure_works.test"], "model.dw_adventure_works.stg_address": ["model.dw_adventure_works.dim_address"], "model.dw_adventure_works.stg_countryregion": [], "model.dw_adventure_works.stg_creditcard": ["model.dw_adventure_works.dim_creditcard"], "model.dw_adventure_works.stg_customer": ["model.dw_adventure_works.dim_customer"], "model.dw_adventure_works.stg_orderdetail": ["model.dw_adventure_works.fact_order_details"], "model.dw_adventure_works.stg_orderheadersalesreason": ["model.dw_adventure_works.dim_reason"], "model.dw_adventure_works.stg_orders": ["model.dw_adventure_works.fact_order_details"], "model.dw_adventure_works.stg_person": ["model.dw_adventure_works.dim_customer"], "model.dw_adventure_works.stg_product": ["model.dw_adventure_works.dim_product"], "model.dw_adventure_works.stg_salesreason": ["model.dw_adventure_works.dim_reason"], "model.dw_adventure_works.stg_stateprovince": ["model.dw_adventure_works.dim_address"], "test.dw_adventure_works.test": [], "test.dw_adventure_works.unique_dim_address_address_sk": [], "test.dw_adventure_works.not_null_dim_address_address_sk": [], "test.dw_adventure_works.unique_dim_creditcard_creditcard_sk": [], "test.dw_adventure_works.not_null_dim_creditcard_creditcard_sk": [], "test.dw_adventure_works.unique_dim_customer_customer_sk": [], "test.dw_adventure_works.not_null_dim_customer_customer_sk": [], "test.dw_adventure_works.unique_dim_product_product_sk": [], "test.dw_adventure_works.not_null_dim_product_product_sk": [], "test.dw_adventure_works.unique_dim_reason_salesorder_sk": [], "test.dw_adventure_works.not_null_dim_reason_salesorder_sk": [], "test.dw_adventure_works.not_null_fact_order_details_salesorderid": [], "test.dw_adventure_works.relationships_fact_order_details_customer_fk__customer_sk__ref_dim_customer_": [], "test.dw_adventure_works.relationships_fact_order_details_creditcard_fk__creditcard_sk__ref_dim_creditcard_": [], "test.dw_adventure_works.relationships_fact_order_details_product_fk__product_sk__ref_dim_product_": [], "test.dw_adventure_works.relationships_fact_order_details_address_fk__address_sk__ref_dim_address_": [], "test.dw_adventure_works.source_unique_adventure_works_salesorderheader_salesorderid": [], "test.dw_adventure_works.source_not_null_adventure_works_salesorderheader_salesorderid": [], "source.dw_adventure_works.adventure_works.salesorderheader": ["model.dw_adventure_works.stg_orders", "test.dw_adventure_works.source_not_null_adventure_works_salesorderheader_salesorderid", "test.dw_adventure_works.source_unique_adventure_works_salesorderheader_salesorderid"], "source.dw_adventure_works.adventure_works.salesorderdetail": ["model.dw_adventure_works.stg_orderdetail"], "source.dw_adventure_works.adventure_works.salesorderheadersalesreason": ["model.dw_adventure_works.stg_orderheadersalesreason"], "source.dw_adventure_works.adventure_works.salesreason": ["model.dw_adventure_works.stg_salesreason"], "source.dw_adventure_works.adventure_works.creditcard": ["model.dw_adventure_works.stg_creditcard"], "source.dw_adventure_works.adventure_works.customer": ["model.dw_adventure_works.stg_customer"], "source.dw_adventure_works.adventure_works.person": ["model.dw_adventure_works.stg_person"], "source.dw_adventure_works.adventure_works.address": ["model.dw_adventure_works.stg_address"], "source.dw_adventure_works.adventure_works.countryregion": ["model.dw_adventure_works.stg_countryregion"], "source.dw_adventure_works.adventure_works.stateprovince": ["model.dw_adventure_works.stg_stateprovince"], "source.dw_adventure_works.adventure_works.product": ["model.dw_adventure_works.stg_product"]}}